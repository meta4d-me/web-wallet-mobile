/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IM4mBaggage {
  export type LockedNFTStruct = {
    owner: string;
    gameId: BigNumberish;
    uuid: string;
  };

  export type LockedNFTStructOutput = [string, BigNumber, string] & {
    owner: string;
    gameId: BigNumber;
    uuid: string;
  };
}

export declare namespace IM4mComponentsV2 {
  export type PrepareAndMintParamStruct = {
    tokenId: BigNumberish;
    prepare: boolean;
    name: string;
    symbol: string;
    amount: BigNumberish;
  };

  export type PrepareAndMintParamStructOutput = [
    BigNumber,
    boolean,
    string,
    string,
    BigNumber
  ] & {
    tokenId: BigNumber;
    prepare: boolean;
    name: string;
    symbol: string;
    amount: BigNumber;
  };
}

export interface M4mBaggageWithoutRoleInterface extends utils.Interface {
  contractName: "M4mBaggageWithoutRole";
  functions: {
    "gameBegin(uint256,string,uint256,uint256[],uint256[])": FunctionFragment;
    "gameEnd(uint256,uint256[],uint256[],uint256[],uint256[],bytes,bytes)": FunctionFragment;
    "getGameOwner(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isGameSettled(address,uint256,uint256,string)": FunctionFragment;
    "lockComponents(uint256,uint256,uint256[],uint256[])": FunctionFragment;
    "lockedComponents(uint256,uint256)": FunctionFragment;
    "lockedEmptyNFTs(uint256)": FunctionFragment;
    "lockedNFTs(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGameSignerAndOperator(uint256,address,address)": FunctionFragment;
    "settleLoots(uint256,uint256,uint256[],uint256[],uint256[],uint256[],bytes,bytes)": FunctionFragment;
    "settleNewLoots(uint256,uint256,(uint256,bool,string,string,uint256)[],bytes,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOperator(uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferSigner(uint256,address)": FunctionFragment;
    "unlockComponents(uint256,uint256,uint256[],bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "gameBegin",
    values: [BigNumberish, string, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "gameEnd",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isGameSettled",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockComponents",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedComponents",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedEmptyNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGameSignerAndOperator",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleLoots",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleNewLoots",
    values: [
      BigNumberish,
      BigNumberish,
      IM4mComponentsV2.PrepareAndMintParamStruct[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOperator",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSigner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockComponents",
    values: [BigNumberish, BigNumberish, BigNumberish[], BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "gameBegin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGameSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedEmptyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockedNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameSignerAndOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleLoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleNewLoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockComponents",
    data: BytesLike
  ): Result;

  events: {
    "GameBegin(uint256,tuple)": EventFragment;
    "GameSettled(uint256,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OperatorUpdated(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SignerUpdated(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameBegin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerUpdated"): EventFragment;
}

export type GameBeginEvent = TypedEvent<
  [BigNumber, IM4mBaggage.LockedNFTStructOutput],
  { m4mTokenId: BigNumber; info: IM4mBaggage.LockedNFTStructOutput }
>;

export type GameBeginEventFilter = TypedEventFilter<GameBeginEvent>;

export type GameSettledEvent = TypedEvent<
  [BigNumber, IM4mBaggage.LockedNFTStructOutput],
  { m4mTokenId: BigNumber; info: IM4mBaggage.LockedNFTStructOutput }
>;

export type GameSettledEventFilter = TypedEventFilter<GameSettledEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OperatorUpdatedEvent = TypedEvent<
  [BigNumber, string],
  { gameId: BigNumber; operator: string }
>;

export type OperatorUpdatedEventFilter = TypedEventFilter<OperatorUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SignerUpdatedEvent = TypedEvent<
  [BigNumber, string],
  { gameId: BigNumber; signer: string }
>;

export type SignerUpdatedEventFilter = TypedEventFilter<SignerUpdatedEvent>;

export interface M4mBaggageWithoutRole extends BaseContract {
  contractName: "M4mBaggageWithoutRole";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: M4mBaggageWithoutRoleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gameBegin(
      gameId: BigNumberish,
      uuid: string,
      m4mTokenId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gameEnd(
      m4mTokenId: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGameOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { signer: string; operator: string }>;

    initialize(
      reg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isGameSettled(
      owner: string,
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      uuid: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockComponents(
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedComponents(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedEmptyNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        gameId: BigNumber;
        usedNonce: BigNumber;
      }
    >;

    lockedNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        owner: string;
        gameId: BigNumber;
        uuid: string;
      }
    >;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGameSignerAndOperator(
      gameId: BigNumberish,
      gameSigner: string,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleNewLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      params: IM4mComponentsV2.PrepareAndMintParamStruct[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOperator(
      gameId: BigNumberish,
      newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferSigner(
      gameId: BigNumberish,
      newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockComponents(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      outComponentIds: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  gameBegin(
    gameId: BigNumberish,
    uuid: string,
    m4mTokenId: BigNumberish,
    inComponentIds: BigNumberish[],
    inAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gameEnd(
    m4mTokenId: BigNumberish,
    lootIds: BigNumberish[],
    lootAmounts: BigNumberish[],
    lostIds: BigNumberish[],
    lostAmounts: BigNumberish[],
    operatorSig: BytesLike,
    gameSignerSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGameOwner(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { signer: string; operator: string }>;

  initialize(
    reg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isGameSettled(
    owner: string,
    m4mTokenId: BigNumberish,
    gameId: BigNumberish,
    uuid: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockComponents(
    m4mTokenId: BigNumberish,
    gameId: BigNumberish,
    inComponentIds: BigNumberish[],
    inAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedComponents(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedEmptyNFTs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      owner: string;
      gameId: BigNumber;
      usedNonce: BigNumber;
    }
  >;

  lockedNFTs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      owner: string;
      gameId: BigNumber;
      uuid: string;
    }
  >;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGameSignerAndOperator(
    gameId: BigNumberish,
    gameSigner: string,
    operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleLoots(
    m4mTokenId: BigNumberish,
    nonce: BigNumberish,
    lootIds: BigNumberish[],
    lootAmounts: BigNumberish[],
    lostIds: BigNumberish[],
    lostAmounts: BigNumberish[],
    operatorSig: BytesLike,
    gameSignerSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleNewLoots(
    m4mTokenId: BigNumberish,
    nonce: BigNumberish,
    params: IM4mComponentsV2.PrepareAndMintParamStruct[],
    operatorSig: BytesLike,
    gameSignerSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOperator(
    gameId: BigNumberish,
    newOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferSigner(
    gameId: BigNumberish,
    newSigner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockComponents(
    m4mTokenId: BigNumberish,
    nonce: BigNumberish,
    outComponentIds: BigNumberish[],
    operatorSig: BytesLike,
    gameSignerSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    gameBegin(
      gameId: BigNumberish,
      uuid: string,
      m4mTokenId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    gameEnd(
      m4mTokenId: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getGameOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { signer: string; operator: string }>;

    initialize(reg: string, overrides?: CallOverrides): Promise<void>;

    isGameSettled(
      owner: string,
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      uuid: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockComponents(
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    lockedComponents(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedEmptyNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        gameId: BigNumber;
        usedNonce: BigNumber;
      }
    >;

    lockedNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        owner: string;
        gameId: BigNumber;
        uuid: string;
      }
    >;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGameSignerAndOperator(
      gameId: BigNumberish,
      gameSigner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settleLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    settleNewLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      params: IM4mComponentsV2.PrepareAndMintParamStruct[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOperator(
      gameId: BigNumberish,
      newOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferSigner(
      gameId: BigNumberish,
      newSigner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockComponents(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      outComponentIds: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GameBegin(uint256,tuple)"(
      m4mTokenId?: null,
      info?: null
    ): GameBeginEventFilter;
    GameBegin(m4mTokenId?: null, info?: null): GameBeginEventFilter;

    "GameSettled(uint256,tuple)"(
      m4mTokenId?: null,
      info?: null
    ): GameSettledEventFilter;
    GameSettled(m4mTokenId?: null, info?: null): GameSettledEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OperatorUpdated(uint256,address)"(
      gameId?: null,
      operator?: null
    ): OperatorUpdatedEventFilter;
    OperatorUpdated(gameId?: null, operator?: null): OperatorUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SignerUpdated(uint256,address)"(
      gameId?: null,
      signer?: null
    ): SignerUpdatedEventFilter;
    SignerUpdated(gameId?: null, signer?: null): SignerUpdatedEventFilter;
  };

  estimateGas: {
    gameBegin(
      gameId: BigNumberish,
      uuid: string,
      m4mTokenId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gameEnd(
      m4mTokenId: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGameOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      reg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isGameSettled(
      owner: string,
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      uuid: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockComponents(
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedComponents(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedEmptyNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGameSignerAndOperator(
      gameId: BigNumberish,
      gameSigner: string,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleNewLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      params: IM4mComponentsV2.PrepareAndMintParamStruct[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOperator(
      gameId: BigNumberish,
      newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferSigner(
      gameId: BigNumberish,
      newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockComponents(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      outComponentIds: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gameBegin(
      gameId: BigNumberish,
      uuid: string,
      m4mTokenId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gameEnd(
      m4mTokenId: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGameOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      reg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isGameSettled(
      owner: string,
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      uuid: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockComponents(
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedComponents(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedEmptyNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGameSignerAndOperator(
      gameId: BigNumberish,
      gameSigner: string,
      operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleNewLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      params: IM4mComponentsV2.PrepareAndMintParamStruct[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOperator(
      gameId: BigNumberish,
      newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferSigner(
      gameId: BigNumberish,
      newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockComponents(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      outComponentIds: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
