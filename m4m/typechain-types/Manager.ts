/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IManager {
  export type TokenStruct = {
    chainId: BigNumberish;
    nft: string;
    tokenId: BigNumberish;
  };

  export type TokenStructOutput = [BigNumber, string, BigNumber] & {
    chainId: BigNumber;
    nft: string;
    tokenId: BigNumber;
  };
}

export interface ManagerInterface extends utils.Interface {
  contractName: "Manager";
  functions: {
    "getInfo((uint256,address,uint256),address)": FunctionFragment;
    "getLatestInfoAll((uint256,address,uint256))": FunctionFragment;
    "info(bytes32,address)": FunctionFragment;
    "setInfo((uint256,address,uint256),string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getInfo",
    values: [IManager.TokenStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestInfoAll",
    values: [IManager.TokenStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "info",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInfo",
    values: [IManager.TokenStruct, string]
  ): string;

  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestInfoAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setInfo", data: BytesLike): Result;

  events: {};
}

export interface Manager extends BaseContract {
  contractName: "Manager";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getInfo(
      token: IManager.TokenStruct,
      creator: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLatestInfoAll(
      token: IManager.TokenStruct,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { _creators: string[]; _uris: string[] }>;

    info(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setInfo(
      token: IManager.TokenStruct,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getInfo(
    token: IManager.TokenStruct,
    creator: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getLatestInfoAll(
    token: IManager.TokenStruct,
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { _creators: string[]; _uris: string[] }>;

  info(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setInfo(
    token: IManager.TokenStruct,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getInfo(
      token: IManager.TokenStruct,
      creator: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getLatestInfoAll(
      token: IManager.TokenStruct,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { _creators: string[]; _uris: string[] }>;

    info(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setInfo(
      token: IManager.TokenStruct,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getInfo(
      token: IManager.TokenStruct,
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestInfoAll(
      token: IManager.TokenStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setInfo(
      token: IManager.TokenStruct,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getInfo(
      token: IManager.TokenStruct,
      creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestInfoAll(
      token: IManager.TokenStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    info(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setInfo(
      token: IManager.TokenStruct,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
