/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IM4mComponentsV2 {
  export type PrepareAndMintParamStruct = {
    tokenId: BigNumberish;
    prepare: boolean;
    name: string;
    symbol: string;
    amount: BigNumberish;
  };

  export type PrepareAndMintParamStructOutput = [
    BigNumber,
    boolean,
    string,
    string,
    BigNumber
  ] & {
    tokenId: BigNumber;
    prepare: boolean;
    name: string;
    symbol: string;
    amount: BigNumber;
  };
}

export interface IM4mBaggageWithoutRoleInterface extends utils.Interface {
  contractName: "IM4mBaggageWithoutRole";
  functions: {
    "lockComponents(uint256,uint256,uint256[],uint256[])": FunctionFragment;
    "lockedComponents(uint256,uint256)": FunctionFragment;
    "lockedEmptyNFTs(uint256)": FunctionFragment;
    "settleLoots(uint256,uint256,uint256[],uint256[],uint256[],uint256[],bytes,bytes)": FunctionFragment;
    "settleNewLoots(uint256,uint256,(uint256,bool,string,string,uint256)[],bytes,bytes)": FunctionFragment;
    "unlockComponents(uint256,uint256,uint256[],bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lockComponents",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedComponents",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedEmptyNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleLoots",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleNewLoots",
    values: [
      BigNumberish,
      BigNumberish,
      IM4mComponentsV2.PrepareAndMintParamStruct[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockComponents",
    values: [BigNumberish, BigNumberish, BigNumberish[], BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "lockComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedEmptyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleLoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleNewLoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockComponents",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IM4mBaggageWithoutRole extends BaseContract {
  contractName: "IM4mBaggageWithoutRole";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IM4mBaggageWithoutRoleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lockComponents(
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedComponents(
      m4mTokenId: BigNumberish,
      componentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedEmptyNFTs(
      m4mTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        gameId: BigNumber;
        usedNonce: BigNumber;
      }
    >;

    settleLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleNewLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      params: IM4mComponentsV2.PrepareAndMintParamStruct[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockComponents(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      outComponentIds: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  lockComponents(
    m4mTokenId: BigNumberish,
    gameId: BigNumberish,
    inComponentIds: BigNumberish[],
    inAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedComponents(
    m4mTokenId: BigNumberish,
    componentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedEmptyNFTs(
    m4mTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      owner: string;
      gameId: BigNumber;
      usedNonce: BigNumber;
    }
  >;

  settleLoots(
    m4mTokenId: BigNumberish,
    nonce: BigNumberish,
    lootIds: BigNumberish[],
    lootAmounts: BigNumberish[],
    lostIds: BigNumberish[],
    lostAmounts: BigNumberish[],
    operatorSig: BytesLike,
    gameSignerSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleNewLoots(
    m4mTokenId: BigNumberish,
    nonce: BigNumberish,
    params: IM4mComponentsV2.PrepareAndMintParamStruct[],
    operatorSig: BytesLike,
    gameSignerSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockComponents(
    m4mTokenId: BigNumberish,
    nonce: BigNumberish,
    outComponentIds: BigNumberish[],
    operatorSig: BytesLike,
    gameSignerSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lockComponents(
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    lockedComponents(
      m4mTokenId: BigNumberish,
      componentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedEmptyNFTs(
      m4mTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        gameId: BigNumber;
        usedNonce: BigNumber;
      }
    >;

    settleLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    settleNewLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      params: IM4mComponentsV2.PrepareAndMintParamStruct[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockComponents(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      outComponentIds: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    lockComponents(
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedComponents(
      m4mTokenId: BigNumberish,
      componentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedEmptyNFTs(
      m4mTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleNewLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      params: IM4mComponentsV2.PrepareAndMintParamStruct[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockComponents(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      outComponentIds: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lockComponents(
      m4mTokenId: BigNumberish,
      gameId: BigNumberish,
      inComponentIds: BigNumberish[],
      inAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedComponents(
      m4mTokenId: BigNumberish,
      componentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedEmptyNFTs(
      m4mTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settleLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      lootIds: BigNumberish[],
      lootAmounts: BigNumberish[],
      lostIds: BigNumberish[],
      lostAmounts: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleNewLoots(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      params: IM4mComponentsV2.PrepareAndMintParamStruct[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockComponents(
      m4mTokenId: BigNumberish,
      nonce: BigNumberish,
      outComponentIds: BigNumberish[],
      operatorSig: BytesLike,
      gameSignerSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
